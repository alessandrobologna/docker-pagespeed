{"name":"Docker-pagespeed","tagline":"a docker build of pagesped, nginx and varnish","body":"# docker-pagespeed\r\n\r\n![Architecture diagram](https://github.com/alessandrobologna/docker-pagespeed/raw/master/art/diagram.jpg)\r\n\r\n## What is it?\r\nA docker build of [pagespeed](https://developers.google.com/speed/pagespeed/module/), [nginx](http://nginx.org/) and [varnish 4](https://www.varnish-cache.org/), with some convenient tooling to help developing enviromnent configurations that can be deployed to Amazon Elastic Beanstalk\r\n\r\n## Running it\r\nThis platform can be run locally, within a docker environment, or on AWS, within [Elastic Beanstalk](https://aws.amazon.com/elasticbeanstalk/). Typically you will testing a configuration in local, and then deploy to AWS.\r\n\r\n### Within a local Docker environment\r\nPrerequisites:\r\n- [docker](https://docs.docker.com/installation/)\r\n- [docker-machine](https://docs.docker.com/machine/install-machine/)\r\n- [docker-compose](https://docs.docker.com/compose/install/)\r\n- optionally, the [eb cli](http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/eb-cli3-install.html) for deploying to Elastic Beanstalk\r\n\r\nPlease see the [documentation](https://docs.docker.com/machine/get-started/) on the Docker site on how to create a local development machine. Once you have created one, let's say it's called devlocal, run `eval(docker-machine env devlocal)`. This will configure you terminal session to point to the docker daemon running on your local machine.\r\n\r\nThen, you need to have a configuration created in the `configs/local` directory. There are a lof of examples in [here](configs/local), so just take one and rename/change it for your needs. If your configuration is called `myslowsite` then just run:\r\n\r\n`make run myslowsite`\r\n\r\nThen open your browser and point to your local machine ip (`docker-machine ip devlocal` if you don't know it).\r\nIf everything goes as expected, you should see your site loading, with all the optimizations you have configured.\r\n\r\n\r\n## Environment variables\r\n- NGINX_PORT: the port on which nginx would listen (typically 8080)\r\n- COOKIES: a pipe delimited list of cookie names that are whitelisted\r\n- BACKEND: the fully qualified hostname for the backend (i.e. www.example.com)\r\n- BACKENDS: a wildcard for other hostnames that are serving contents for the main site (i.e *.example.com)\r\n- FRONTEND: the URL of the site, as it will appear to users (i.e. http://faster.example.com)\r\n- SERVER_NAME: the fully qualified hostname for the fronted (i.e. faster.example.com) \r\n- PROXY_DOMAINS: a space separated list of fully qualified hostnames that can be safely considered part of the site (i.e. cdn.somesite.com js.somether.net)\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}