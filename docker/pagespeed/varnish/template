# device detection from https://github.com/dreamsxin/modpagespeed/blob/master/src/install/debug_conf.vcl
vcl 4.0;
import std;
import vsthrottle;

# Block 1: Define upstream server's host and port.
backend default {
  # Location of PageSpeed server.
  .host = "127.0.0.1";
  .port = "8080";
  .probe = {
    .url = "${HEALTCHECK:-/}";
    .timeout = 60s;
    .interval = 60s;
    .window = 1;
    .threshold = 1;
   }
}

# Block 2: Define a key based on the User-Agent which can be used for hashing.
# Also set the PS-CapabilityList header for PageSpeed server to respect.
sub generate_user_agent_based_key {
    # Define placeholder PS-CapabilityList header values for large and small
    # screens with no UA dependent optimizations. Note that these placeholder
    # values should not contain any of ll, ii, dj, jw or ws, since these
    # codes will end up representing optimizations to be supported for the
    # request.
    set req.http.default_ps_capability_list_for_large_screens = "LargeScreen.SkipUADependentOptimizations:";
    set req.http.default_ps_capability_list_for_small_screens = "TinyScreen.SkipUADependentOptimizations:";

    # As a fallback, the PS-CapabilityList header that is sent to the upstream
    # PageSpeed server should be for a large screen device with no browser
    # specific optimizations.
    set req.http.PS-CapabilityList = req.http.default_ps_capability_list_for_large_screens;

    # Cache-fragment 1: Desktop User-Agents that support lazyload_images (ll),
    # inline_images (ii) and defer_javascript (dj).
    # Note: Wget is added for testing purposes only.
    if (req.http.User-Agent ~ "(?i)Chrome/|Firefox/|MSIE |Safari|Wget") {
      set req.http.PS-CapabilityList = "ll,ii,dj:";
    }
    # Cache-fragment 2: Desktop User-Agents that support lazyload_images (ll),
    # inline_images (ii), defer_javascript (dj), webp (jw) and lossless_webp
    # (ws).
    if (req.http.User-Agent ~
        "(?i)Chrome/[2][3-9]+\.|Chrome/[[3-9][0-9]+\.|Chrome/[0-9]{3,}\.") {
      set req.http.PS-CapabilityList = "ll,ii,dj,jw,ws:";
    }
    # Cache-fragment 3: This fragment contains (a) Desktop User-Agents that
    # should not map to fragments 1 or 2 and (b) all tablet User-Agents. These
    # will only get optimizations that work on all browsers and use image
    # compression qualities applicable to large screens. Note that even tablets
    # that are capable of supporting inline or webp images, for e.g. Android
    # 4.1.2, will not get these advanced optimizations.
    if (req.http.User-Agent ~ "(?i)Firefox/[1-2]\.|MSIE [5-8]\.|bot|Yahoo!|Ruby|RPT-HTTPClient|(Google \(\+https\:\/\/developers\.google\.com\/\+\/web\/snippet\/\))|Android|iPad|TouchPad|Silk-Accelerated|Kindle Fire") {
      set req.http.PS-CapabilityList = req.http.default_ps_capability_list_for_large_screens;
    }
    # Cache-fragment 4: Mobiles and small screen tablets will use image compression
    # qualities applicable to small screens, but all other optimizations will be
    # those that work on all browsers.
    if (req.http.User-Agent ~ "(?i)Mozilla.*Android.*Mobile*|iPhone|BlackBerry|Opera Mobi|Opera Mini|SymbianOS|UP.Browser|J-PHONE|Profile/MIDP|portalmmm|DoCoMo|Obigo|Galaxy Nexus|GT-I9300|GT-N7100|HTC One|Nexus [4|7|S]|Xoom|XT907") {
      set req.http.PS-CapabilityList = req.http.default_ps_capability_list_for_small_screens;
    }
    # unset placeholder header values.
    unset req.http.default_ps_capability_list_for_large_screens;
    unset req.http.default_ps_capability_list_for_small_screens;
}

sub vcl_hash {
  # Block 3: Use the PS-CapabilityList value for computing the hash.
  hash_data(req.http.PS-CapabilityList);
  hash_data(req.http.Cookie);
}

# Block 3a: Define ACL for purge requests
acl local {
  # Purge requests are only allowed from localhost.
  "localhost";
  "127.0.0.1";
}

sub pass_if_beacon {
  if (req.http.PS-ShouldBeacon == "${SECRET_KEY}") {
    return (pass);
  }
}

sub vcl_hit {
  // Send 5% of the HITs to the backend for instrumentation.
  if (req.http.Content-Type ~ "text/html" && std.random(0, 100) <= 5) {
    set req.http.PS-ShouldBeacon = "${SECRET_KEY}";
  }
  
  if (obj.ttl >= 0s) {
    // A pure unadultered hit, deliver it or pass it 
    call pass_if_beacon;
    return (deliver);
  }
  
  if (obj.ttl + obj.grace > 0s) {
    // Object is in grace, deliver it and automatically triggers a background fetch or pass it
    set req.http.Page-Speed-Grace = "Yes";
    call pass_if_beacon;
    return (deliver);
  }
  
  // object is not graced anymore, fetch & deliver once we get the result
  call pass_if_beacon;
  return (fetch);
}

sub vcl_miss {
  // Send 25% of the MISSes to the backend for instrumentation.
  if (std.random(0, 100) <= 25) {
    set req.http.PS-ShouldBeacon = "${SECRET_KEY}";
    return (pass);
  }
  return (fetch);
}

# invoked after purge, restart the request as a GET request
sub vcl_purge {
  // restart request
  set req.method = "GET";
  return (restart);
}

# Block 4: In vcl_recv, on receiving a request, call the method responsible for
# generating the User-Agent based key for hashing into the cache.
sub vcl_recv {
  
  // determine a client identity based on the X-Forwarded-For header, and fallback to the ip
  set client.identity = std.ip(regsub(req.http.X-Forwarded-For, "[, ].*$", ""), client.ip);
  
  if (vsthrottle.is_denied(client.identity, ${MAX_REQUESTS:-256}, 1s)) {
    // Client has exceeded the allowed number of requests
    return (synth(429, "Too Many Requests, please slow down"));
  }
  
  
  // add a flag to determine if the request is local, coming from pagespeed
  if (client.ip ~ local) {
    set req.http.X-Local="Yes";
  } else {
    set req.http.Host = "${SERVER_NAME}";
  }
  
  if (req.http.Cookie) {
    set req.http.Cookie = ";" + req.http.Cookie;
    set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
    set req.http.Cookie = regsuball(req.http.Cookie, ";(${COOKIES:-NOCOOKIE})=", "; \1=");
    set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
    set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

    if (req.http.Cookie == "") {
        unset req.http.Cookie;
    }
  }

  call generate_user_agent_based_key;

  # We want to support beaconing filters, i.e., one or more of inline_images,
  # lazyload_images, inline_preview_images or prioritize_critical_css are
  # enabled. We define a placeholder constant called ps_should_beacon_key_value
  # so that some percentages of hits and misses can be sent to the backend
  # with this value used for the PS-ShouldBeacon header to force beaconing.
  # This value should match the value of the DownstreamCacheRebeaconingKey
  # pagespeed directive used by your backend server.
  # WARNING: Do not use "random_rebeaconing_key" for your configuration, but
  # instead change it to something specific to your site, to keep it secure.
    
  # Incoming PS-ShouldBeacon headers should not be allowed since this will allow
  # external entities to force the server to instrument pages.
  unset req.http.PS-ShouldBeacon;

  # Block 3d: Verify the ACL for an incoming purge request and handle it.
  if (req.method == "PURGE") {
    if (!client.ip ~ local) {
      return (synth(405,"Not allowed."));
    }
    return (purge);
  }
  set req.http.Page-Speed-Grace = "No";
  return (hash);
}

# Block 6: unset upstream cache control and varnish headers
sub vcl_backend_response {
  if (bereq.http.X-Local=="Yes" && bereq.url ~ "\.(png|gif|jpg|swf|css|js|ico|woff|ttf)$" ) {
    // the request is coming from MapOriginDomain and is for a static resource, do some header cleanup
    unset beresp.http.Expires;
    unset beresp.http.Set-Cookie;
    unset beresp.http.Pragma;
    if (beresp.http.Cache-Control ~ "max-age=0|private|no-cache|no-store") {
      set beresp.http.Cache-Control = "max-age=3600";
    }
    if (beresp.http.Vary == "*") {
      unset beresp.http.Vary;
    }
    set beresp.http.X-Cleaned="Yes";
    return (deliver);
  }
  if (beresp.http.Content-Type ~ "text/html") {
    // Hide the upstream cache control headers.
    unset beresp.http.ETag;
    unset beresp.http.Last-Modified;
    unset beresp.http.Cache-Control;
    unset beresp.http.Expires;
    unset beresp.http.Via;
    unset beresp.http.X-Cache;
    unset beresp.http.X-Age;
    unset beresp.http.X-Varnish;
    unset beresp.http.X-Varnish-Cache;
    unset beresp.http.X-Varnish-Cache-Hits;
    unset beresp.http.X-Varnish;
    set beresp.http.Cache-Control = "no-cache, max-age=0";
  } else if (!beresp.http.Cache-Control ~ "max-age") {
     // add a customizable caching header for resources that specify none
     set beresp.http.Cache-Control = "max-age=${MAX_AGE:-300}";
  }
  // grace every object for one hour (override with GRACE)
  set beresp.grace = ${GRACE:-1h};
  return (deliver);
}

# Block 7: Add a header for identifying cache hits/misses.
sub vcl_deliver {
  if (req.http.X-Local=="Yes") {
    // it's a response for MapOriginDomain, no need to add extra headers
    return (deliver);
  }
  // tell downstream caches to cache based on the encoding and the device detection
  set resp.http.Vary = "Page-Speed-Device, Accept-Encoding";
  set resp.http.Page-Speed-Device = req.http.PS-CapabilityList;
  if (obj.hits > 0) {
    set resp.http.Page-Speed-Cache = "HIT";
    # add a configurable extension to the ttl for downstream caches
    if (resp.http.Cache-Control ~ "max-age=0") {
      set resp.http.Cache-Control="public, max-age=${MAX_AGE:-300}";
    }
  } else {
    set resp.http.Page-Speed-Cache = "MISS";
  }
  return (deliver);
}