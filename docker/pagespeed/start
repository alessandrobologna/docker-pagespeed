#!/bin/bash 

# remove old default conf if present
rm -f /etc/nginx/sites-enabled/default

# create cache dir
/bin/mkdir -p /var/cache/pagespeed
/bin/chmod a+wrx /var/cache/pagespeed

/bin/mkdir -p /var/cache/varnish
/bin/chmod a+wrx /var/cache/varnish

/bin/mkdir -p /var/cache/nginx
/bin/chmod a+wrx /var/cache/nginx

/bin/mkdir -p /var/log/pagespeed
/bin/chmod a+wrx /var/log/pagespeed

# make the container believe that SERVER_NAME is 127.0.0.1
echo -e "\n127.0.0.1 \t${SERVER_NAME}" >> /etc/hosts

# determine available memory:
MEMORY_MB=$(($(grep MemTotal /proc/meminfo | awk '{print $2}') / 1024))

#determine available disk space for pagespeed cache
DISK_PAGESPEED_MB=$(df -m /var/cache/pagespeed | awk '/[0-9]%/{print $(NF-4)}')
#determine available disk space for varnish cache
DISK_VARNISH_MB=$(df -m /var/cache/varnish | awk '/[0-9]%/{print $(NF-4)}')

# set FRONTEND
FRONTEND="${FRONTEND:-${SERVER_NAME}}"
ORIGIN=${ORIGIN:-${BACKEND}}

# maybe build backends
MAP_BACKENDS=$(for backend in ${BACKENDS}
do
	echo -e "\tpagespeed Domain ${backend};"
	echo -e "\tpagespeed MapRewriteDomain ${FRONTEND} ${backend};"
done)

# maybe build proxy domains
MAP_PROXY_DOMAINS=$(for domain in ${PROXY_DOMAINS}
do
	echo -e "\tpagespeed Domain ${domain};"
	echo -e "\tpagespeed MapOriginDomain 127.0.0.1:8080/${PROXY_PATH:-_assets}/plain/${domain} ${domain};"
	echo -e "\tpagespeed MapRewriteDomain ${FRONTEND}/${PROXY_PATH:-_assets}/plain/${domain} ${domain};"
done)

# maybe build https proxy domains
MAP_PROXY_HTTPS_DOMAINS=$(for domain in ${PROXY_HTTPS_DOMAINS}
do
	echo -e "\tpagespeed Domain ${domain};"
	echo -e "\tpagespeed MapOriginDomain 127.0.0.1:8080/${PROXY_PATH:-_assets}/https/${domain} https://${domain}; "
	echo -e "\tpagespeed MapRewriteDomain ${FRONTEND}/${PROXY_PATH:-_assets}/https/${domain} https://${domain};"
done)

ALLOWED_DOMAINS=$(for domain in ${BACKEND} ${PROXY_DOMAINS} ${PROXY_HTTPS_DOMAINS}
do
	echo -e "\t\"$domain\" \"$domain\";"
done)

SHARD_DOMAINS=$([ -n "${CDN}" ] && echo "pagespeed ShardDomain ${FRONTEND} $(echo ${CDN} | sed 's/ \{1,\}/,/g');")

# maybe setup extra configurations for filters
ENABLED_FILTERS=$(for filter in ${FILTERS_ENABLED}
do
	echo -e "\tpagespeed EnableFilters ${filter};"
done
if [ -n "${DEBUG}" ]
then
	echo -e "\tpagespeed EnableFilters debug;"
fi)

DISABLED_FILTERS=$(for filter in ${FILTERS_DISABLED}
do
	echo -e "\tpagespeed DisableFilters ${filter};"
done)

ON_FILTERS=$(for filter in ${FILTERS_ON}
do
	echo -e "\tpagespeed ${filter} on;"
done
)

OFF_FILTERS=$(for filter in ${FILTERS_OFF}
do
	echo -e "\tpagespeed ${filter} off;"
done)

# configure memcache: if MEMCACHED is not provided or not reachable start a local node in this container
MEMCACHED_ADDR="${MEMCACHED:-${MEMCACHED_1_PORT_11211_TCP_ADDR:-127.0.0.1}}"
if ! nc -z -w5 "${MEMCACHED_ADDR}" 11211
then
	echo "Could not connect to ${MEMCACHED_ADDR}:11211, starting local node with size ${MEMCACHED_SIZE:-$((MEMORY_MB/4))}M"
	/usr/bin/memcached -d -m ${MEMCACHED_SIZE:-$((MEMORY_MB/4))}M -p 11211 -u nobody -l 127.0.0.1
fi

# generate a random string for the secret beaconing key
SECRET_KEY=$(dd if=/dev/urandom bs=256 count=1 2>/dev/null | env LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

SET_HEADER_MOBILE=$(if [ -n "${IF_MOBILE}" ]
then
	awk -F ": " '{name=$1; printf "unset req.http.%s;",name} {$1="";value=$0;sub(/^[ ]+/, "", value)} {printf "set req.http.%s=\"%s\";",name,value}' <<< ${IF_MOBILE}
fi)

SET_HEADER_DESKTOP=$(if [ -n "${IF_DESKTOP}" ]
then
	awk -F ": " '{name=$1; printf "unset req.http.%s;",name} {$1="";value=$0;sub(/^[ ]+/, "", value)} {printf "set req.http.%s=\"%s\";",name,value}' <<< ${IF_DESKTOP}
fi)

DEBUG_HEADERS=$([ -n "${DEBUG}" ] && echo "set req.http.X-Page-Speed-Debug=\"Yes\";")
HIDE_PROXY_HEADERS=$([ -n "${HIDE_PROXY_HEADERS}" ] && echo "include sites-enabled/includes/proxy-remove-headers;")
HIDE_BACKEND_HEADERS=$([ -n "${HIDE_BACKEND_HEADERS}" ] && echo "include sites-enabled/includes/proxy-remove-headers;")
CORS=$([ -n "${CORS}" ] && echo "set resp.http.Access-Control-Allow-Origin= \"${CORS}\";")

VARNISH_UNSET_RESPONSE_HEADERS=$(for header in ${UNSET_RESPONSE_HEADERS}
do
	echo "  unset ${header}";
done)


# replace env variables in template
echo "$(eval "echo -e \"$(sed 's/\"/\\\"/g' /etc/nginx/sites-enabled/template)\"")" >  /etc/nginx/sites-enabled/default.conf
echo -e "\n/etc/nginx/sites-enabled/default.conf:"
cat --number /etc/nginx/sites-enabled/default.conf


# replace env variables in template
echo "$(eval "echo \"$(sed 's/\"/\\\"/g' /etc/varnish//template)\"")" >  /etc/varnish/default.vcl
echo -e "\n/etc/varnish/default.vcl:"
cat --number /etc/varnish/default.vcl

echo -e "\n/etc/hosts:"
cat --number /etc/hosts
echo -e "\n"
# start varnish with one third of disk space allocated for cache
echo "starting varnish with cache size ${VARNISH_SIZE:-$((DISK_VARNISH_MB/3))}M"
/usr/sbin/varnishd -f /etc/varnish/default.vcl -s file,/var/cache/varnish/varnish_storage1.bin,${VARNISH_SIZE:-$((DISK_VARNISH_MB/3))}M -a 0.0.0.0:${VARNISH_PORT:-80}

# start cache warmer
if [ -n "${WARMER_URL}" ] 
then
	echo "starting cache warmer: ${WARMER_URL}"
	/cache-warmer ${WARMER_URL} > /var/log/nginx/warmly.log &
fi

# optionally copy the EXTRA dir in  /usr/share/nginx/html
if [ -n "${FILES}" ]
then
	rm -rf /usr/share/nginx/html/*
	echo $FILES | base64 -d | tar -C /usr/share/nginx/html -zxf - 
elif [ -f /host/tmp/files.b64 ]
then
	rm -rf /usr/share/nginx/html/*
	cat /host/tmp/files.b64 | base64 -d | tar -C /usr/share/nginx/html -zxf - 
fi

# start nginx
echo "starting nginx with cache size $((${DISK_PAGESPEED_MB} / 3))M"

exec /usr/sbin/nginx $@