vcl 4.0;
import std;
import vsthrottle;
include "devicedetect.vcl";
# following includes are disabled (as they are not needed now)
# include "useragent-key.vcl";


# Block 1: Define upstream server's host and port.
backend default {
  # Location of PageSpeed server.
  .host = "${SERVER_NAME}";
  .port = "8080";
  .probe = {
    .url = "${HEALTCHECK:-/}";
    .timeout = 60s;
    .interval = 30s;
    .window = 1;
    .threshold = 1;
   }
}

sub browserdetect {
  set req.http.X-UA = "default";
  if (req.http.user-agent ~ "MSIE") {
    set req.http.X-UA = "msie";
  } 
  if (req.http.user-agent ~ "Firefox") {
    set req.http.X-UA = "firefox";
  }  
  if (req.http.user-agent ~ "Safari") {
     set req.http.X-UA = "safari";
  } 
  if (req.http.user-agent ~ "Chrome") {
    set req.http.X-UA = "chrome";
  } 
  if (req.http.user-agent ~ "CloudFront") {
    set req.http.X-UA = "cloudfront";
  } 
}

sub ps_capabilities {
  call browserdetect; 
  if (req.http.X-UA ~ "cloudfront") {
  	if (req.http.CloudFront-Is-Mobile-Viewer == "true") {
  	  set req.http.X-UA-Device="mobile";
  	} elif (req.http.CloudFront-Is-Tablet-Viewer == "true") {
  	  set req.http.X-UA-Device="tablet";
  	} elif (req.http.CloudFront-Is-SmartTV-Viewer == "true") {
  	  set req.http.X-UA-Device="tv";
  	} else {
  	  set req.http.X-UA-Device="desktop";
  	}
  } else {
    call devicedetect;
  } 
  if (req.http.X-UA == "msie" || req.http.X-UA == "default") {
    if (req.http.X-UA-Device ~ "mobile") {
      set req.http.PS-CapabilityList="TinyScreen.SkipUADependentOptimizations:";
    } else {
      set req.http.PS-CapabilityList="LargeScreen.SkipUADependentOptimizations:";
    }
  } else {
    set req.http.PS-CapabilityList="ll,ii,dj:";
  }
  if (req.http.Accept ~ "image\/webp") {
    set req.http.PS-CapabilityList = "ll,ii,dj,jw,ws:";
  }
  set req.http.X-Page-Speed-Device=req.http.PS-CapabilityList + " " +req.http.X-UA-Device + "/" + req.http.X-UA;
}



sub vcl_hash {
  // Use the PS-CapabilityList value and the detected device for computing the hash
  hash_data(req.http.X-Page-Speed-Device);
}

# Block 3a: Define ACL for purge requests
acl local {
  # Purge requests are only allowed from localhost.
  "localhost";
  "127.0.0.1";
}

sub pass_if_beacon {
  if (req.http.PS-ShouldBeacon == "${SECRET_KEY}") {
    return (pass);
  }
}

sub vcl_hit {
  // Send 5% of the HITs to the backend for instrumentation.
  if (obj.http.Content-Type ~ "text/html" && (req.url ~ "(?i)beacon=(true|yes)" 
    || std.random(0, 100 ) <= 5 || obj.hits == 1)) {
    set req.http.PS-ShouldBeacon = "${SECRET_KEY}";
  }
  
  if (obj.ttl >= 0s) {
    // A pure unadultered hit, deliver it or pass it 
    call pass_if_beacon;
    return (deliver);
  }
  
  if (obj.ttl + obj.grace > 0s) {
    // Object is in grace, deliver it and automatically triggers a background fetch
    set req.http.X-PS-Grace = "true";
    return (deliver);
  }
  
  // object is not graced anymore, fetch & deliver once we get the result
  call pass_if_beacon;
  return (fetch);
}

sub vcl_miss {
  // Send 25% of the MISSes to the backend for instrumentation.
  if (req.url ~ "(?i)beacon=(true|yes)" || std.random(0, 100) <= 25) {
    set req.http.PS-ShouldBeacon = "${SECRET_KEY}";
    return (pass);
  }
  return (fetch);
}

# invoked after purge, restart the request as a GET request
sub vcl_purge {
  // restart request
  set req.method = "GET";
  set req.http.X-Page-Speed-After-Purge = "yes";
  return (restart);
}

# Block 4: In vcl_recv, on receiving a request, call the method responsible for
# generating the User-Agent based key for hashing into the cache.
sub vcl_recv {
  // do not accept external beaconing requests
  unset req.http.PS-ShouldBeacon;

  // determine a client identity based on the X-Forwarded-For header, and fallback to the ip
  set client.identity = std.ip(regsub(req.http.X-Forwarded-For, "[, ].*$", ""), client.ip);
  
  if (vsthrottle.is_denied(client.identity, ${MAX_REQUESTS:-256}, 1s)) {
    // Client has exceeded the allowed number of requests
    return (synth(429, "Too Many Requests, please slow down"));
  }
  
  set req.http.Host = "${SERVER_NAME}";

  # call generate_user_agent_based_key;
  call ps_capabilities;
  
  # unset the user agent, as PageSpeed will still try to use if it's available
  unset req.http.User-Agent;
  
  if (req.http.Cookie) {
    set req.http.Cookie = ";" + req.http.Cookie;
    set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
    set req.http.Cookie = regsuball(req.http.Cookie, ";(${COOKIES:-NOCOOKIE})=", "; \1=");
    set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
    set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

    if (req.http.Cookie == "") {
        unset req.http.Cookie;
    }
  }
  
  
  if (req.url ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+") {
    // Skip the cache for .pagespeed. resource.  PageSpeed has its own cache for these, and these could bloat up the caching layer.
    return (pass);
  }

  // optionally add debug headers in the response (set in /start)
  ${DEBUG_HEADERS}

  // optionally add headers for the backend to allow it determine mobile vs desktop
  if (req.http.X-UA-Device ~ "mobile") {
    ${SET_HEADER_MOBILE}
  } else {
    ${SET_HEADER_DESKTOP}
  }
  
  
  # We want to support beaconing filters, i.e., one or more of inline_images,
  # lazyload_images, inline_preview_images or prioritize_critical_css are
  # enabled. We define a placeholder constant called ps_should_beacon_key_value
  # so that some percentages of hits and misses can be sent to the backend
  # with this value used for the PS-ShouldBeacon header to force beaconing.
  # This value should match the value of the DownstreamCacheRebeaconingKey
  # pagespeed directive used by your backend server.
  # WARNING: Do not use "random_rebeaconing_key" for your configuration, but
  # instead change it to something specific to your site, to keep it secure.
    
  # Incoming PS-ShouldBeacon headers should not be allowed since this will allow
  # external entities to force the server to instrument pages.
  unset req.http.PS-ShouldBeacon;

  # Block 3d: Verify the ACL for an incoming purge request and handle it.
  if (req.method == "PURGE") {
    if (!client.ip ~ local) {
      return (synth(405,"Not allowed."));
    }
    return (purge);
  }

  if (req.method != "GET" && req.method != "HEAD") {
    // We only deal with GET and HEAD by default 
    return (pass);
  } 
  return (hash);
}

# Block 6: unset upstream cache control and varnish headers
sub vcl_backend_response {
  // If this request was issued after a purge, PageSpeed will not have yet optimized the page fully
  if (bereq.http.X-Page-Speed-After-Purge) {
    // Mark as "Hit-For-Pass" for the next 15 seconds
    set beresp.ttl = 15s;
    set beresp.uncacheable = true;
    set beresp.http.X-Page-Speed-After-Purge="Yes";
  } 
  
  // make sure the object is still cached in varnish for a minimum amount of time
  if (beresp.ttl == 0s) {
    set beresp.ttl   = ${TTL:-120}s;
  }
  set beresp.http.X-Page-Speed-TTL=beresp.ttl;

  if (!bereq.http.PS-ShouldBeacon) {
    // grace every object that was not beaconed for one hour (override with GRACE)
    set beresp.grace = ${GRACE:-3600}s;
  }
}

# Block 7: Add a header for identifying cache hits/misses.
sub vcl_deliver {
  set resp.http.Vary = "Accept-Encoding";
  if (req.http.X-Page-Speed-Device && resp.http.Content-Type ~ "text/html") {
    set resp.http.X-Page-Speed-Hits = obj.hits;
    set resp.http.X-Page-Speed-Device = req.http.X-Page-Speed-Device;
    if (obj.hits > 0) {
      if (req.http.X-PS-Grace == "true") {
        set resp.http.X-Page-Speed-Cache = "GRACED";
        // don't cache on downstream servers for  graced responses
        set resp.http.Cache-Control="no-cache, max-age=0";
      } else {
        // it's a HIT
        set resp.http.X-Page-Speed-Cache = "HIT";
        if (std.integer(resp.http.Age,0) > ${MINAGE:-60}) {
          // after a few seconds that the response is a HIT, there's a reasonable certainty that it has been purged and then rewritten to a fair extent, so
          // add a configurable extension to the ttl for downstream caches 
          if (std.integer(resp.http.Age,0) < ${MAXAGE:-120}) {
            // still quite new cannot risk keep in downstream for too long
            set resp.http.Cache-Control="public, max-age=" + (${MAXAGE:-120} - std.integer(resp.http.Age,0));
          } else {
            // this response has been in cache for a while, downstream can keep it for much longer (up to the source TTL)
            set resp.http.Cache-Control="public, max-age=" + ${MAX_DOWNSTREAM_AGE:-(std.integer(regsub(resp.http.X-Page-Speed-TTL,"([0-9]+)(\.([0-9]+))?","\1"),${MAXAGE:-60}) - std.integer(resp.http.Age,0))};
          }
        } else {
          set resp.http.Cache-Control="no-cache, max-age=0";
        }
      }
    } else {
      // it's a MISS or is PASS
      if (req.http.PS-ShouldBeacon) {
        set resp.http.X-Page-Speed-Beaconed = "Yes";
        // don't cache on downstream servers for beaconed responses
        set resp.http.Cache-Control="private, max-age=0";
      } else {
        set resp.http.Cache-Control="no-cache, max-age=0";
      }
      set resp.http.X-Page-Speed-Cache = "MISS";
    }
  }
  if (req.http.X-Page-Speed-Debug) {
    set resp.http.X-Page-Speed-Seen-User-Agent = req.http.User-Agent;
    set resp.http.X-Page-Speed-Seen-Accept = req.http.Accept;
  } else {
    unset resp.http.X-Page-Speed-Cache;
    unset resp.http.X-Page-Speed-Hits;
    unset resp.http.X-Page-Speed-Device;
    unset resp.http.X-Page-Speed;
    unset resp.http.X-Varnish;
    unset resp.http.X-Page-Speed-TTL;
  }
  ${CORS}  
  ${VARNISH_UNSET_RESPONSE_HEADERS}
  
  return (deliver);
}