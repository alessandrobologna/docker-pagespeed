vcl 4.0;
import std;
import vsthrottle;
include "devicedetect.vcl";
# following includes are disabled (as they are not needed now)
# include "useragent-key.vcl";


# Block 1: Define upstream server's host and port.
backend default {
  # Location of PageSpeed server.
  .host = "127.0.0.1";
  .port = "8080";
  .probe = {
    .url = "${HEALTCHECK:-/}";
    .timeout = 60s;
    .interval = 30s;
    .window = 1;
    .threshold = 1;
   }
}


sub ps_capabilities {
  set req.http.PS-CapabilityList="ll,ii,dj:";
  if (req.http.Accept ~ "image\/webp") {
    set req.http.PS-CapabilityList = "ll,ii,dj,jw,ws:";
  }
}

sub vcl_hash {
  # Block 3: Use the PS-CapabilityList value for computing the hash.
  hash_data(req.http.PS-CapabilityList);
  # hash_data(req.http.X-UA-Device);
}

# Block 3a: Define ACL for purge requests
acl local {
  # Purge requests are only allowed from localhost.
  "localhost";
  "127.0.0.1";
}

sub pass_if_beacon {
  if (req.http.PS-ShouldBeacon == "${SECRET_KEY}") {
    return (pass);
  }
}

sub vcl_hit {
  // Send 5% of the HITs to the backend for instrumentation.
  if (obj.http.Content-Type ~ "text/html" && (req.url ~ "(?i)beacon=(true|yes)" 
  	|| std.random(0, 100 ) <= 5)) {
    set req.http.PS-ShouldBeacon = "${SECRET_KEY}";
  }
  
  if (obj.ttl >= 0s) {
    // A pure unadultered hit, deliver it or pass it 
    call pass_if_beacon;
    return (deliver);
  }
  
  if (obj.ttl + obj.grace > 0s) {
    // Object is in grace, deliver it and automatically triggers a background fetch or pass it
    set req.http.X-PS-Grace = "true";
    call pass_if_beacon;
    return (deliver);
  }
  
  // object is not graced anymore, fetch & deliver once we get the result
  call pass_if_beacon;
  return (fetch);
}

sub vcl_miss {
  // Send 25% of the MISSes to the backend for instrumentation.
  if (req.url ~ "(?i)beacon=(true|yes)" || std.random(0, 100) <= 25) {
    set req.http.PS-ShouldBeacon = "${SECRET_KEY}";
    return (pass);
  }
  return (fetch);
}

# invoked after purge, restart the request as a GET request
sub vcl_purge {
  // restart request
  set req.method = "GET";
  return (restart);
}

# Block 4: In vcl_recv, on receiving a request, call the method responsible for
# generating the User-Agent based key for hashing into the cache.
sub vcl_recv {
  // determine a client identity based on the X-Forwarded-For header, and fallback to the ip
  set client.identity = std.ip(regsub(req.http.X-Forwarded-For, "[, ].*$", ""), client.ip);
  
  if (vsthrottle.is_denied(client.identity, ${MAX_REQUESTS:-256}, 1s)) {
    // Client has exceeded the allowed number of requests
    return (synth(429, "Too Many Requests, please slow down"));
  }
  
  set req.http.Host = "${SERVER_NAME}";
  
  if (req.http.Cookie) {
    set req.http.Cookie = ";" + req.http.Cookie;
    set req.http.Cookie = regsuball(req.http.Cookie, "; +", ";");
    set req.http.Cookie = regsuball(req.http.Cookie, ";(${COOKIES:-NOCOOKIE})=", "; \1=");
    set req.http.Cookie = regsuball(req.http.Cookie, ";[^ ][^;]*", "");
    set req.http.Cookie = regsuball(req.http.Cookie, "^[; ]+|[; ]+$", "");

    if (req.http.Cookie == "") {
        unset req.http.Cookie;
    }
  }

  if (req.url ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+") {
    // Skip the cache for .pagespeed. resource.  PageSpeed has its own
    // cache for these, and these could bloat up the caching layer.
    return (pass);
  }
  
  # call generate_user_agent_based_key;
  call devicedetect; 
  call ps_capabilities;

  // optionally add debug headers in the response (set in /start)
  ${DEBUG_HEADERS}

  // optionally add headers for the backend to allow it determine mobile vs desktop
  if (req.http.X-UA-Device ~ "mobile") {
    ${SET_HEADER_MOBILE}
  } else {
    ${SET_HEADER_DESKTOP}
  }
  
  
  # We want to support beaconing filters, i.e., one or more of inline_images,
  # lazyload_images, inline_preview_images or prioritize_critical_css are
  # enabled. We define a placeholder constant called ps_should_beacon_key_value
  # so that some percentages of hits and misses can be sent to the backend
  # with this value used for the PS-ShouldBeacon header to force beaconing.
  # This value should match the value of the DownstreamCacheRebeaconingKey
  # pagespeed directive used by your backend server.
  # WARNING: Do not use "random_rebeaconing_key" for your configuration, but
  # instead change it to something specific to your site, to keep it secure.
    
  # Incoming PS-ShouldBeacon headers should not be allowed since this will allow
  # external entities to force the server to instrument pages.
  unset req.http.PS-ShouldBeacon;

  # Block 3d: Verify the ACL for an incoming purge request and handle it.
  if (req.method == "PURGE") {
    if (!client.ip ~ local) {
      return (synth(405,"Not allowed."));
    }
    return (purge);
  }
  
  if (req.url ~ "\.pagespeed\.([a-z]\.)?[a-z]{2}\.[^.]{10}\.[^.]+") {
    return (pass);
  }
  
  return (hash);
}

# Block 6: unset upstream cache control and varnish headers
sub vcl_backend_response {
  if (beresp.http.Content-Type ~ "text/html") {
    // For html responses, hide the upstream cache control headers.
    unset beresp.http.ETag;
    unset beresp.http.Pragma;
    unset beresp.http.Last-Modified;
    unset beresp.http.Cache-Control;
    unset beresp.http.Expires;
    unset beresp.http.Via;
    unset beresp.http.X-Cache;
    unset beresp.http.X-Age;
    unset beresp.http.X-Varnish;
    unset beresp.http.X-Varnish-Cache;
    unset beresp.http.X-Varnish-Cache-Hits;
    unset beresp.http.X-Varnish;
    unset beresp.http.Set-Cookie;
    unset beresp.http.X-Cache-Control;
    set beresp.http.X-Cache-Control = "no-cache, max-age=0";
  } 
  // grace every object for one hour (override with GRACE)
  set beresp.ttl   = ${TTL:-300}s;
  set beresp.grace = ${GRACE:-3600}s;
}

# Block 7: Add a header for identifying cache hits/misses.
sub vcl_deliver {
  unset resp.http.X-Varnish;
  unset resp.http.X-Page-Speed;
  set resp.http.Vary = "Accept-Encoding";
  if (req.http.Page-Speed-Debug) {
    set resp.http.Page-Speed-CapabilityList = req.http.PS-CapabilityList;
    set resp.http.X-UA-Device = req.http.X-UA-Device;
    set resp.http.Page-Speed-Hits = obj.hits;
  }
  if (req.http.PS-ShouldBeacon) {
  	set resp.http.Page-Speed-Beacon = "Yes";
  }
  if (obj.hits > 0) {
    // it's a HIT
    if (req.http.Page-Speed-Debug) {
	    if (req.http.X-PS-Grace == "true") {
	      set resp.http.Page-Speed-Cache = "GRACED";
	    } else {
	      set resp.http.Page-Speed-Cache = "HIT";
	    }
    }
    // add a configurable extension to the ttl for downstream caches
    if (resp.http.Cache-Control ~ "max-age=0") {
      set resp.http.Cache-Control="public, s-maxage=${S_MAXAGE:-120}, max-age=0";
    }
  } else {
    // it's a MISS or a GRACE
    if(resp.http.X-Cache-Control) {
      set resp.http.Cache-Control = resp.http.X-Cache-Control;
    }
    if (req.http.Page-Speed-Debug) {
	    if (req.http.X-PS-Grace == "true") {
	      set resp.http.Page-Speed-Cache = "GRACED";
	    } else {
	      set resp.http.Page-Speed-Cache = "MISS";
	    }
    }    
  }
  unset resp.http.X-Cache-Control;
  return (deliver);
}