#!/bin/bash 

# remove old default conf if present
rm -f /etc/nginx/sites-enabled/default

# determine available memory:
MEMORY_MB=$(($(grep MemTotal /proc/meminfo | awk '{print $2}') / 1024))

# set FRONTEND
if [ -z $FRONTEND ]
then 
	FRONTEND=http://${SERVER_NAME}
fi

# maybe build backends
MAP_BACKENDS=$(for backend in ${BACKENDS}
do
	echo -e "\tpagespeed Domain ${backend};"
	echo -e "\tpagespeed MapRewriteDomain ${FRONTEND} ${backend};"
done)

# maybe build proxy domains
MAP_PROXY_DOMAINS=$(for domain in ${PROXY_DOMAINS}
do
#	echo -e "\tpagespeed Domain ${domain};"
	echo -e "\tpagespeed MapOriginDomain 127.0.0.1:8080/proxy/${domain} ${domain};"
	echo -e "\tpagespeed MapRewriteDomain ${FRONTEND}/proxy/${domain} ${domain};"
done)

# maybe build https proxy domains
MAP_PROXY_HTTPS_DOMAINS=$(for domain in ${PROXY_HTTPS_DOMAINS}
do
#	echo -e "\tpagespeed Domain ${domain};"
	echo -e "\tpagespeed MapOriginDomain 127.0.0.1:8080/proxy/${domain} https://${domain}; "
	echo -e "\tpagespeed MapRewriteDomain ${FRONTEND}/proxy/${domain} https://${domain};"
done)

# maybe setup extra configurations for filters
ENABLED_FILTERS=$(for filter in ${FILTERS_ENABLED}
do
	echo -e "\tpagespeed EnableFilters ${filter};"
done
if [ -n "${DEBUG}" ]
then
	echo -e "\tpagespeed EnableFilters debug;"
fi)

DISABLED_FILTERS=$(for filter in ${FILTERS_DISABLED}
do
	echo -e "\tpagespeed DisableFilters ${filter};"
done)

ON_FILTERS=$(for filter in ${FILTERS_ON}
do
	echo -e "\tpagespeed ${filter} on;"
done
)

OFF_FILTERS=$(for filter in ${FILTERS_OFF}
do
	echo -e "\tpagespeed ${filter} off;"
done)

DEBUG_HEADERS=$(if [ -n "${DEBUG}" ]
then
	 echo "set req.http.Page-Speed-Debug=\"Yes\";"
fi)
	
# configure memcache: if MEMCACHED is not provided or not reachable start a local node
MEMCACHED_ADDR="${MEMCACHED:-127.0.0.1}"
if ! nc -z -w5 "${MEMCACHED_ADDR}" 11211
then
	echo "Could not connect to ${MEMCACHED_ADDR}:11211, starting local node"
	/usr/bin/memcached -d -m ${MEMCACHED_SIZE:-$((MEMORY_MB/4))}M -p 11211 -u nobody -l 127.0.0.1
fi

# generate a random string for the secret beaconing key
SECRET_KEY=$(dd if=/dev/urandom bs=256 count=1 2>/dev/null | env LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

SET_HEADER_MOBILE=$(if [ -n "${IF_MOBILE}" ]
then
	IFS=':; ' read -a split <<< "${IF_MOBILE}"
	echo "unset req.http.${split[0]}; set req.http.${split[0]}=\"${split[1]}\";"
fi)

SET_HEADER_DESKTOP=$(if [ -n "${IF_DESKTOP}" ]
then
	IFS=':; ' read -a split <<< "${IF_DESKTOP}"
	echo "unset req.http.${split[0]}; set req.http.${split[0]}=\"${split[1]}\";"
fi)

# replace env variables in template
echo "$(eval "echo -e \"$(sed 's/\"/\\\"/g' /etc/nginx/sites-enabled/template)\"")" >  /etc/nginx/sites-enabled/default.conf
echo -e "\n/etc/nginx/sites-enabled/default.conf:"
cat --number /etc/nginx/sites-enabled/default.conf

# create cache dir
/bin/mkdir -p /var/ngx_pagespeed_cache
/bin/chmod a+wrx /var/ngx_pagespeed_cache

/bin/mkdir -p /var/log/pagespeed
/bin/chmod a+wrx /var/log/pagespeed

# replace env variables in template
echo "$(eval "echo \"$(sed 's/\"/\\\"/g' /etc/varnish//template)\"")" >  /etc/varnish/default.vcl
echo -e "\n/etc/varnish/default.vcl:"
cat --number /etc/varnish/default.vcl

echo -e "\n/etc/hosts:"
cat --number /etc/hosts
echo -e "\n"
# start varnish
/usr/sbin/varnishd -f /etc/varnish/default.vcl -s malloc,${VARNISH_SIZE:-$((MEMORY_MB/4))}M -a 0.0.0.0:${VARNISH_PORT:-80}

# start nginx
/usr/sbin/nginx $@